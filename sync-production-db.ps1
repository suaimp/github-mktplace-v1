# Script de Sincroniza√ß√£o com Banco de Produ√ß√£o
# Execute: powershell -ExecutionPolicy Bypass -File sync-production-db.ps1

Write-Host "=== Sincroniza√ß√£o com Banco de Produ√ß√£o ===" -ForegroundColor Green

# Verificar se Docker est√° rodando
Write-Host "Verificando Docker..." -ForegroundColor Yellow
try {
    docker ps | Out-Null
    Write-Host "‚úÖ Docker est√° rodando" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Docker n√£o est√° rodando!" -ForegroundColor Red
    Write-Host "Inicie o Docker Desktop e tente novamente" -ForegroundColor Yellow
    exit 1
}

# Verificar Supabase CLI
Write-Host "Verificando Supabase CLI..." -ForegroundColor Yellow
try {
    $supabaseVersion = supabase --version
    Write-Host "‚úÖ Supabase CLI: $supabaseVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Supabase CLI n√£o encontrado!" -ForegroundColor Red
    exit 1
}

Write-Host ""
Write-Host "üîÑ PROCESSO DE SINCRONIZA√á√ÉO:" -ForegroundColor Cyan
Write-Host "1. Fazer backup das migrations locais atuais" -ForegroundColor White
Write-Host "2. Conectar ao projeto remoto" -ForegroundColor White  
Write-Host "3. Baixar schema atual da produ√ß√£o" -ForegroundColor White
Write-Host "4. Gerar migrations baseadas no estado atual" -ForegroundColor White
Write-Host "5. Configurar ambiente local" -ForegroundColor White
Write-Host ""

# Passo 1: Backup das migrations existentes
Write-Host "üì¶ Passo 1: Fazendo backup das migrations atuais..." -ForegroundColor Yellow
$backupFolder = "supabase/migrations_backup_$(Get-Date -Format 'yyyyMMdd_HHmmss')"
New-Item -ItemType Directory -Path $backupFolder -Force | Out-Null
Copy-Item "supabase/migrations/*" $backupFolder -Recurse -Force
Write-Host "‚úÖ Backup criado em: $backupFolder" -ForegroundColor Green

# Passo 2: Conectar ao projeto remoto
Write-Host "üîó Passo 2: Conectando ao projeto remoto..." -ForegroundColor Yellow
Write-Host "Voc√™ precisa do Project ID do Supabase (encontrado na URL do projeto)" -ForegroundColor Cyan
$projectId = Read-Host "Digite o Project ID do Supabase"

if ([string]::IsNullOrWhiteSpace($projectId)) {
    Write-Host "‚ùå Project ID √© obrigat√≥rio!" -ForegroundColor Red
    exit 1
}

# Login no Supabase (se necess√°rio)
Write-Host "üîê Fazendo login no Supabase..." -ForegroundColor Yellow
try {
    supabase auth login
    Write-Host "‚úÖ Login realizado" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erro no login. Verifique suas credenciais" -ForegroundColor Red
    exit 1
}

# Passo 3: Linkar ao projeto
Write-Host "üîó Linkando ao projeto remoto..." -ForegroundColor Yellow
try {
    supabase link --project-ref $projectId
    Write-Host "‚úÖ Projeto linkado com sucesso" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erro ao linkar projeto. Verifique o Project ID" -ForegroundColor Red
    exit 1
}

# Passo 4: Baixar schema atual da produ√ß√£o
Write-Host "‚¨áÔ∏è Passo 3: Baixando schema atual da produ√ß√£o..." -ForegroundColor Yellow
try {
    # Criar nova migration baseada no estado atual da produ√ß√£o
    supabase db diff --schema public,auth,storage --use-migra
    Write-Host "‚úÖ Schema baixado e diff gerado" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è Erro ao gerar diff. Tentando m√©todo alternativo..." -ForegroundColor Yellow
    
    # M√©todo alternativo: reset e pull
    try {
        supabase db reset --linked
        Write-Host "‚úÖ Schema sincronizado via reset" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå Erro na sincroniza√ß√£o. Processo manual necess√°rio" -ForegroundColor Red
        Write-Host "Execute manualmente: supabase db pull" -ForegroundColor Yellow
    }
}

# Passo 5: Configurar para desenvolvimento local
Write-Host "üè† Passo 4: Configurando ambiente local..." -ForegroundColor Yellow

# Criar arquivo de configura√ß√£o para alternar entre local e produ√ß√£o
$envConfig = @"
# Configura√ß√£o para alternar entre Local e Produ√ß√£o
# 
# Para usar LOCALMENTE:
# 1. Renomeie este arquivo para .env.local
# 2. Execute: npm run supabase:start
# 3. Execute: npm run dev
#
# Para usar PRODU√á√ÉO:
# 1. Use o arquivo .env (j√° configurado)
# 2. Execute: npm run dev

# === CONFIGURA√á√ÉO LOCAL ===
VITE_SUPABASE_URL=http://localhost:54321
VITE_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0
VITE_SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU
VITE_SUPABASE_FUNCTIONS_URL=http://localhost:54321/functions/v1

# Configura√ß√£o de desenvolvimento
NODE_ENV=development
SUPABASE_LOCAL=true

# URL para redirect local
VITE_RESET_PASSWORD_REDIRECT=http://localhost:3000/password-recovery
"@

$envConfig | Out-File -FilePath ".env.development" -Encoding UTF8
Write-Host "‚úÖ Arquivo .env.development criado" -ForegroundColor Green

# Passo 6: Instru√ß√µes finais
Write-Host ""
Write-Host "üéâ SINCRONIZA√á√ÉO CONCLU√çDA!" -ForegroundColor Green
Write-Host ""
Write-Host "üìã PR√ìXIMOS PASSOS:" -ForegroundColor Cyan
Write-Host ""
Write-Host "1Ô∏è‚É£ Para DESENVOLVIMENTO LOCAL (dados isolados):" -ForegroundColor White
Write-Host "   ‚Ä¢ Renomeie .env.development para .env.local" -ForegroundColor Gray
Write-Host "   ‚Ä¢ Execute: npm run supabase:start" -ForegroundColor Gray
Write-Host "   ‚Ä¢ Execute: npm run dev" -ForegroundColor Gray
Write-Host ""
Write-Host "2Ô∏è‚É£ Para PRODU√á√ÉO (dados reais):" -ForegroundColor White
Write-Host "   ‚Ä¢ Use o arquivo .env existente" -ForegroundColor Gray
Write-Host "   ‚Ä¢ Execute: npm run dev" -ForegroundColor Gray
Write-Host ""
Write-Host "3Ô∏è‚É£ Para aplicar NOVAS MIGRATIONS:" -ForegroundColor White
Write-Host "   ‚Ä¢ Crie: supabase migration new nome_da_migration" -ForegroundColor Gray
Write-Host "   ‚Ä¢ Teste local: supabase db reset" -ForegroundColor Gray
Write-Host "   ‚Ä¢ Aplique produ√ß√£o: supabase db push" -ForegroundColor Gray
Write-Host ""
Write-Host "‚ö†Ô∏è IMPORTANTE:" -ForegroundColor Yellow
Write-Host "‚Ä¢ Backup das migrations antigas em: $backupFolder" -ForegroundColor Gray
Write-Host "‚Ä¢ Sempre teste mudan√ßas localmente antes de aplicar em produ√ß√£o" -ForegroundColor Gray
Write-Host "‚Ä¢ Use git para versionar suas migrations" -ForegroundColor Gray
