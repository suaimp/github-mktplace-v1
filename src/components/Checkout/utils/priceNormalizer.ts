/**
 * Utilit√°rio para normalizar diferentes formatos de pre√ßo
 * Trata pre√ßos que v√™m como number ou string com formata√ß√£o (ex: "R$ 3.794,00")
 */

/**
 * Normaliza um valor de pre√ßo para n√∫mero
 * Aceita formatos: number, string com R$, string com pontos e v√≠rgulas
 * 
 * @param price - Pre√ßo em qualquer formato
 * @returns number - Pre√ßo normalizado como n√∫mero
 */
export function normalizePrice(price: string | number | null | undefined): number {
  // Se √© null ou undefined, retorna 0
  if (price === null || price === undefined) {
    return 0;
  }

  // Se j√° √© n√∫mero, retorna direto
  if (typeof price === 'number') {
    return price;
  }

  // Se √© string, processa
  if (typeof price === 'string') {
    // Remove "R$", espa√ßos, e outros caracteres n√£o num√©ricos, exceto v√≠rgulas e pontos
    const cleanPrice = price
      .replace(/R\$\s*/gi, '') // Remove "R$" com ou sem espa√ßos
      .replace(/[^\d,.-]/g, '') // Remove tudo exceto d√≠gitos, v√≠rgulas, pontos e h√≠fen
      .trim();

    // Se string est√° vazia ap√≥s limpeza, retorna 0
    if (!cleanPrice) {
      return 0;
    }

    // Detecta se usa v√≠rgula como separador decimal (formato brasileiro)
    // Ex: "3.794,00" ou "1.234,56"
    const hasBrazilianFormat = cleanPrice.includes(',') && cleanPrice.lastIndexOf('.') < cleanPrice.lastIndexOf(',');
    
    if (hasBrazilianFormat) {
      // Formato brasileiro: remove pontos (milhares) e troca v√≠rgula por ponto (decimal)
      const normalized = cleanPrice
        .replace(/\./g, '') // Remove pontos de milhares
        .replace(',', '.'); // Troca v√≠rgula por ponto decimal
      
      const parsed = parseFloat(normalized);
      return isNaN(parsed) ? 0 : parsed;
    } else {
      // Formato americano ou simples
      const parsed = parseFloat(cleanPrice);
      return isNaN(parsed) ? 0 : parsed;
    }
  }

  // Fallback: retorna 0
  return 0;
}

/**
 * Verifica se um valor de pre√ßo √© v√°lido (maior que 0)
 * 
 * @param price - Pre√ßo em qualquer formato
 * @returns boolean - true se o pre√ßo √© v√°lido
 */
export function isValidPrice(price: string | number | null | undefined): boolean {
  const normalized = normalizePrice(price);
  return normalized > 0;
}

/**
 * Formata um pre√ßo normalizado para exibi√ß√£o em reais
 * 
 * @param price - Pre√ßo como n√∫mero
 * @returns string - Pre√ßo formatado (ex: "R$ 3.794,00")
 */
export function formatPrice(price: number): string {
  return new Intl.NumberFormat('pt-BR', {
    style: 'currency',
    currency: 'BRL'
  }).format(price);
}

/**
 * Testa a fun√ß√£o com diferentes formatos de pre√ßo
 * Fun√ß√£o utilit√°ria para debugging
 */
export function testPriceNormalizer() {
  const testCases = [
    3.794,
    "3.794,00",
    "R$ 3.794,00", 
    "R$3.794,00",
    "1.234,56",
    "R$ 1.234,56",
    "1234.56",
    "1234",
    "",
    null,
    undefined,
    "R$ 0,00",
    "0"
  ];

  console.log('üß™ Testando normaliza√ß√£o de pre√ßos:');
  testCases.forEach(testCase => {
    const normalized = normalizePrice(testCase);
    console.log(`Input: ${JSON.stringify(testCase)} -> Output: ${normalized}`);
  });
}
