import jsPDF from 'jspdf';
import { PdfExportData, PdfGenerationOptions, ExportEntry, ExportField } from '../types/exportTypes';
import { LogoService } from './LogoService';
import { PdfLogoRenderer } from './PdfLogoRenderer';

/**
 * Servi√ßo respons√°vel pela gera√ß√£o de PDFs com dados da tabela
 */
export class PdfExportService {
  /**
   * Gera e faz download do PDF com os dados fornecidos
   */
  static async generatePdf(data: PdfExportData): Promise<void> {
    try {
      console.log('üöÄ [PDF] Iniciando gera√ß√£o de PDF');
      console.log('üìä [PDF] Dados recebidos:', {
        formTitle: data.formTitle,
        totalEntries: data.totalEntries,
        fieldsCount: data.fields.length,
        entriesCount: data.entries.length,
        hasLogo: !!data.logoBase64
      });

      // Carregar logo se n√£o foi fornecido
      let logoBase64 = data.logoBase64;
      if (!logoBase64) {
        console.log('üé® [PDF] Carregando logo da plataforma...');
        const logoResult = await LogoService.getLogoForPdf(false); // Usar logo claro
        logoBase64 = logoResult || undefined;
        console.log('üé® [PDF] Logo carregado:', !!logoBase64);
      }

      const options: PdfGenerationOptions = {
        title: `Relat√≥rio - ${data.formTitle}`,
        subtitle: `Exportado em ${data.exportDate}`,
        includeHeader: true,
        includeFooter: true,
        pageOrientation: 'landscape'
      };

      console.log('‚öôÔ∏è [PDF] Configura√ß√µes:', options);

      const pdf = new jsPDF({
        orientation: options.pageOrientation,
        unit: 'mm',
        format: 'a4'
      });

      console.log('üìÑ [PDF] Objeto jsPDF criado');

      // Configurar fonte padr√£o
      pdf.setFont('helvetica');
      console.log('üî§ [PDF] Fonte configurada');

      // Adicionar cabe√ßalho
      if (options.includeHeader) {
        console.log('üìã [PDF] Adicionando cabe√ßalho...');
        this.addHeader(pdf, options);
        console.log('‚úÖ [PDF] Cabe√ßalho adicionado');
      }

      // Adicionar tabela com dados
      console.log('üìä [PDF] Adicionando tabela...');
      this.addDataTable(pdf, data);
      console.log('‚úÖ [PDF] Tabela adicionada');

      // Adicionar rodap√© com logo
      if (options.includeFooter) {
        console.log('üìã [PDF] Adicionando rodap√©...');
        this.addFooter(pdf, data, logoBase64);
        console.log('‚úÖ [PDF] Rodap√© adicionado');
      }

      // Fazer download do arquivo
      const fileName = this.generateFileName(data.formTitle);
      console.log('üíæ [PDF] Nome do arquivo:', fileName);
      
      pdf.save(fileName);
      console.log('üéâ [PDF] PDF gerado e salvo com sucesso!');
    } catch (error) {
      console.error('‚ùå [PDF] Erro detalhado ao gerar PDF:', error);
      console.error('üìä [PDF] Stack trace:', error instanceof Error ? error.stack : 'N/A');
      console.error('üìä [PDF] Dados que causaram erro:', data);
      throw new Error(`Falha ao gerar PDF: ${error instanceof Error ? error.message : 'Erro desconhecido'}`);
    }
  }

  /**
   * Adiciona cabe√ßalho ao PDF
   */
  private static addHeader(pdf: jsPDF, options: PdfGenerationOptions): void {
    try {
      console.log('üè∑Ô∏è [PDF Header] Iniciando adi√ß√£o do cabe√ßalho');
      const pageWidth = pdf.internal.pageSize.getWidth();
      console.log('üìè [PDF Header] Largura da p√°gina:', pageWidth);
      
      // T√≠tulo principal
      pdf.setFontSize(18);
      pdf.setTextColor(0, 0, 0); // PRETO - GARANTIR COR PRETA
      console.log('üìù [PDF Header] Adicionando t√≠tulo:', options.title);
      pdf.text(options.title, pageWidth / 2, 20, { align: 'center' });

      // Subt√≠tulo
      if (options.subtitle) {
        pdf.setFontSize(12);
        pdf.setTextColor(100, 100, 100); // Cinza para subt√≠tulo
        console.log('üìù [PDF Header] Adicionando subt√≠tulo:', options.subtitle);
        pdf.text(options.subtitle, pageWidth / 2, 30, { align: 'center' });
      }

      // Linha separadora
      pdf.setDrawColor(200, 200, 200);
      pdf.line(20, 35, pageWidth - 20, 35);
      console.log('‚ûñ [PDF Header] Linha separadora adicionada');
    } catch (error) {
      console.error('‚ùå [PDF Header] Erro ao adicionar cabe√ßalho:', error);
      throw error;
    }
  }

  /**
   * Adiciona tabela com dados ao PDF (vers√£o manual sem autoTable)
   */
  private static addDataTable(pdf: jsPDF, data: PdfExportData): void {
    try {
      console.log('üìä [PDF Table] Iniciando cria√ß√£o da tabela manual');
      
      // Preparar cabe√ßalhos da tabela
      console.log('üìã [PDF Table] Preparando cabe√ßalhos...');
      const headers = this.prepareTableHeaders(data.fields);
      console.log('üìã [PDF Table] Cabe√ßalhos preparados:', headers);
      
      // Preparar dados da tabela
      console.log('üìä [PDF Table] Preparando dados das linhas...');
      const rows = this.prepareTableRows(data.entries, data.fields);
      console.log('üìä [PDF Table] Linhas preparadas:', rows.length, 'linhas');

      // Configura√ß√µes da tabela com larguras fixas para evitar sobreposi√ß√£o
      const startY = 50;
      const startX = 10; // Margem menor para aproveitar mais espa√ßo
      const rowHeight = 12; // Altura maior para melhor legibilidade
      const pageWidth = pdf.internal.pageSize.getWidth();
      const availableWidth = pageWidth - 20; // 10px de margem de cada lado

      // Definir larguras espec√≠ficas para cada coluna
      const columnWidths = this.calculateColumnWidths(headers, availableWidth);

      console.log('üìè [PDF Table] Configura√ß√µes:', {
        startY, startX, rowHeight, 
        pageWidth: pageWidth.toFixed(2), 
        availableWidth: availableWidth.toFixed(2),
        headers: headers.length,
        columnWidths
      });

      // Desenhar cabe√ßalhos com cor vermelha #d30000
      pdf.setFillColor(211, 0, 0); // #d30000 em RGB
      pdf.setTextColor(255, 255, 255); // Branco
      pdf.setFontSize(9);
      pdf.setFont('helvetica', 'bold');

      let currentY = startY;
      let currentX = startX;
      
      // Primeiro desenhar o fundo completo do cabe√ßalho
      pdf.rect(startX, currentY, availableWidth, rowHeight, 'F');
      
      // Depois desenhar bordas e texto de cada cabe√ßalho
      headers.forEach((header, index) => {
        const colWidth = columnWidths[index];
        
        // Borda do cabe√ßalho
        pdf.setDrawColor(150, 150, 150);
        pdf.rect(currentX, currentY, colWidth, rowHeight);
        
        // Texto do cabe√ßalho (centralizado e truncado se necess√°rio)
        const headerText = header.length > 12 ? header.substring(0, 10) + '..' : header;
        const textX = currentX + (colWidth / 2);
        pdf.text(headerText, textX, currentY + 8, { align: 'center' });
        
        currentX += colWidth;
      });

      currentY += rowHeight;

      // Desenhar linhas de dados
      pdf.setTextColor(0, 0, 0); // Preto - FOR√áAR SEMPRE PRETO
      pdf.setFont('helvetica', 'normal');
      pdf.setFontSize(8);

      rows.forEach((row, rowIndex) => {
        currentX = startX;
        
        // Alternar cor de fundo das linhas
        if (rowIndex % 2 === 0) {
          pdf.setFillColor(248, 248, 248); // Cinza bem claro
          pdf.rect(startX, currentY, availableWidth, rowHeight, 'F');
        }

        // Desenhar c√©lulas da linha
        row.forEach((cell, colIndex) => {
          const colWidth = columnWidths[colIndex];
          
          // Borda da c√©lula
          pdf.setDrawColor(200, 200, 200);
          pdf.rect(currentX, currentY, colWidth, rowHeight);
          
          // GARANTIR COR PRETA PARA TODAS AS C√âLULAS
          pdf.setTextColor(0, 0, 0); // Preto - FOR√áAR SEMPRE PRETO
          
          // Texto da c√©lula (truncado conforme largura da coluna)
          const maxChars = Math.floor(colWidth / 2.5); // Aproximadamente 2.5px por caractere
          let cellText = String(cell || '-');
          
          if (cellText.length > maxChars) {
            cellText = cellText.substring(0, maxChars - 2) + '..';
          }
          
          // Posicionar texto com pequena margem interna
          pdf.text(cellText, currentX + 2, currentY + 8);
          
          currentX += colWidth;
        });

        currentY += rowHeight;

        // Verificar se precisa de nova p√°gina
        if (currentY > pdf.internal.pageSize.getHeight() - 40) {
          pdf.addPage();
          currentY = 30;
          
          // Redesenhar cabe√ßalho na nova p√°gina
          this.redrawTableHeader(pdf, headers, columnWidths, startX, currentY);
          currentY += rowHeight;
        }
      });
      
      console.log('‚úÖ [PDF Table] Tabela manual criada com sucesso');
    } catch (error) {
      console.error('‚ùå [PDF Table] Erro ao criar tabela manual:', error);
      throw error;
    }
  }

  /**
   * Calcula larguras das colunas baseado no conte√∫do e espa√ßo dispon√≠vel (URL, Pre√ßo, DA)
   */
  private static calculateColumnWidths(headers: string[], availableWidth: number): number[] {
    // Larguras espec√≠ficas para as 3 colunas principais
    const baseWidths: Record<string, number> = {
      'URL': 120,      // URL precisa de mais espa√ßo
      'Pre√ßo': 60,     // Pre√ßo formato R$ XX,XX
      'DA': 40         // DA √© n√∫mero pequeno
    };

    const columnWidths: number[] = [];
    let usedWidth = 0;

    console.log('üìè [PDF Columns] Headers recebidos:', headers);

    // Primeiro passo: atribuir larguras espec√≠ficas
    headers.forEach(header => {
      // Buscar por palavras-chave no header para identificar o tipo
      let baseWidth = 60; // padr√£o
      
      if (header.toLowerCase().includes('url') || header.toLowerCase().includes('site')) {
        baseWidth = baseWidths['URL'] || 120;
      } else if (header.toLowerCase().includes('pre√ßo') || header.toLowerCase().includes('preco') || header.toLowerCase().includes('price')) {
        baseWidth = baseWidths['Pre√ßo'] || 60;
      } else if (header.toLowerCase().includes('da') || header.toLowerCase().includes('domain authority')) {
        baseWidth = baseWidths['DA'] || 40;
      }

      columnWidths.push(baseWidth);
      usedWidth += baseWidth;
    });

    console.log('üìè [PDF Columns] Larguras iniciais:', columnWidths);
    console.log('üìè [PDF Columns] Largura usada/dispon√≠vel:', usedWidth, '/', availableWidth);

    // Segundo passo: ajustar se necess√°rio
    if (usedWidth > availableWidth) {
      // Reduzir proporcionalmente se ultrapassar
      const scaleFactor = availableWidth / usedWidth;
      for (let i = 0; i < columnWidths.length; i++) {
        columnWidths[i] = columnWidths[i] * scaleFactor;
      }
      console.log('üìè [PDF Columns] Larguras reduzidas:', columnWidths);
    } else {
      // Se sobrar espa√ßo, distribuir igualmente
      const extraSpace = availableWidth - usedWidth;
      const extraPerColumn = extraSpace / headers.length;
      for (let i = 0; i < columnWidths.length; i++) {
        columnWidths[i] += extraPerColumn;
      }
      console.log('üìè [PDF Columns] Larguras expandidas:', columnWidths);
    }

    return columnWidths;
  }

  /**
   * Redesenha o cabe√ßalho da tabela em uma nova p√°gina
   */
  private static redrawTableHeader(pdf: jsPDF, headers: string[], columnWidths: number[], startX: number, startY: number): void {
    pdf.setFillColor(211, 0, 0); // #d30000
    pdf.setTextColor(255, 255, 255); // Branco para cabe√ßalhos
    pdf.setFontSize(9);
    pdf.setFont('helvetica', 'bold');

    const availableWidth = columnWidths.reduce((sum, width) => sum + width, 0);
    
    // Primeiro desenhar o fundo completo do cabe√ßalho
    pdf.rect(startX, startY, availableWidth, 12, 'F');
    
    let currentX = startX;
    
    // Depois desenhar bordas e texto de cada cabe√ßalho
    headers.forEach((header, index) => {
      const colWidth = columnWidths[index];
      
      // Borda
      pdf.setDrawColor(150, 150, 150);
      pdf.rect(currentX, startY, colWidth, 12);
      
      // GARANTIR COR BRANCA PARA CABE√áALHOS
      pdf.setTextColor(255, 255, 255); // Branco
      
      // Texto
      const headerText = header.length > 12 ? header.substring(0, 10) + '..' : header;
      const textX = currentX + (colWidth / 2);
      pdf.text(headerText, textX, startY + 8, { align: 'center' });
      
      currentX += colWidth;
    });
  }

  /**
   * Adiciona rodap√© ao PDF
   */
  private static addFooter(
    pdf: jsPDF, 
    data: PdfExportData, 
    logoBase64?: string
  ): void {
    try {
      console.log('üìã [Footer] Adicionando rodap√©');
      const pageHeight = pdf.internal.pageSize.getHeight();
      const pageWidth = pdf.internal.pageSize.getWidth();
      const footerY = pageHeight - 15;

      // Adicionar linha separadora
      pdf.setDrawColor(211, 0, 0); // #d30000
      pdf.setLineWidth(0.5);
      pdf.line(20, footerY - 5, pageWidth - 20, footerY - 5);

      // Adicionar informa√ß√µes de exporta√ß√£o
      pdf.setFontSize(8);
      pdf.setTextColor(0, 0, 0); // PRETO - GARANTIR COR PRETA PARA RODAP√â
      
      const footerText = `Total de ${data.totalEntries} registros | Exportado em ${data.exportDate}`;
      pdf.text(footerText, 20, footerY);

      // Adicionar logo no rodap√© se dispon√≠vel
      if (logoBase64) {
        console.log('üé® [Footer] Adicionando logo ao rodap√©');
        PdfLogoRenderer.addLogoToFooter(pdf, logoBase64, pageWidth, pageHeight);
        console.log('‚úÖ [Footer] Logo adicionado ao rodap√©');
      } else {
        console.log('‚ö†Ô∏è [Footer] Logo n√£o dispon√≠vel');
      }

      console.log('‚úÖ [Footer] Rodap√© conclu√≠do');
    } catch (error) {
      console.error('‚ùå [Footer] Erro ao adicionar rodap√©:', error);
      throw error;
    }
  }

  /**
   * Prepara cabe√ßalhos da tabela (apenas URL, Pre√ßo e DA)
   */
  private static prepareTableHeaders(fields: ExportField[]): string[] {
    // Identificar campos espec√≠ficos por tipo/nome
    const urlField = fields.find(f => 
      f.field_type === 'url' || 
      f.label?.toLowerCase().includes('url') ||
      f.label?.toLowerCase().includes('site')
    );
    
    const daField = fields.find(f => 
      f.label?.toLowerCase().includes('da') ||
      f.label?.toLowerCase().includes('domain authority') ||
      (f.field_type === 'number' && f.label?.toLowerCase().includes('da'))
    );
    
    const precoField = fields.find(f => 
      f.field_type === 'product' ||
      f.label?.toLowerCase().includes('pre√ßo') ||
      f.label?.toLowerCase().includes('preco') ||
      f.label?.toLowerCase().includes('price')
    );

    const headers: string[] = [];
    
    // Adicionar apenas os cabe√ßalhos dos campos que existem
    if (urlField) headers.push(urlField.label || 'URL');
    if (precoField) headers.push(precoField.label || 'Pre√ßo');
    if (daField) headers.push(daField.label || 'DA');

    console.log('üìã [PDF Headers] Cabe√ßalhos filtrados:', headers);
    return headers;
  }

  /**
   * Prepara dados das linhas da tabela (apenas URL, Pre√ßo e DA)
   * IMPORTANTE: Processa TODOS os entries, n√£o apenas os paginados
   */
  private static prepareTableRows(entries: ExportEntry[], fields: ExportField[]): string[][] {
    // Identificar campos espec√≠ficos por tipo/nome
    const urlField = fields.find(f => 
      f.field_type === 'url' || 
      f.label?.toLowerCase().includes('url') ||
      f.label?.toLowerCase().includes('site')
    );
    
    const daField = fields.find(f => 
      f.label?.toLowerCase().includes('da') ||
      f.label?.toLowerCase().includes('domain authority') ||
      (f.field_type === 'number' && f.label?.toLowerCase().includes('da'))
    );
    
    const precoField = fields.find(f => 
      f.field_type === 'product' ||
      f.label?.toLowerCase().includes('pre√ßo') ||
      f.label?.toLowerCase().includes('preco') ||
      f.label?.toLowerCase().includes('price')
    );

    console.log('üîç [PDF Rows] Campos identificados:', {
      url: urlField?.label,
      preco: precoField?.label,
      da: daField?.label
    });

    console.log('üìä [PDF Rows] Processando TODOS os', entries.length, 'registros');

    return entries.map((entry, index) => {
      const rowData: string[] = [];

      // URL
      if (urlField) {
        const urlValue = this.formatFieldValue(entry.values[urlField.id], urlField.field_type);
        rowData.push(urlValue);
      }

      // Pre√ßo
      if (precoField) {
        const precoValue = this.formatFieldValue(entry.values[precoField.id], precoField.field_type);
        console.log(`üí∞ [PDF Rows] Registro ${index + 1} - Pre√ßo formatado:`, {
          original: entry.values[precoField.id],
          formatted: precoValue,
          fieldType: precoField.field_type
        });
        rowData.push(precoValue);
      }

      // DA
      if (daField) {
        const daValue = this.formatFieldValue(entry.values[daField.id], daField.field_type);
        rowData.push(daValue);
      }

      console.log(`üìä [PDF Rows] Registro ${index + 1} processado:`, rowData);
      return rowData;
    });
  }

  /**
   * Formata valor do campo baseado no tipo
   * IMPORTANTE: Todos os valores formatados aqui ser√£o renderizados em PRETO
   */
  private static formatFieldValue(value: any, fieldType: string): string {
    if (!value && value !== 0) return '-';

    switch (fieldType) {
      case 'product':
        if (typeof value === 'object' && value.price) {
          // Verificar se o price j√° tem R$ para evitar duplica√ß√£o
          const priceValue = String(value.price);
          if (priceValue.includes('R$')) {
            return priceValue; // J√° formatado
          } else {
            return `R$ ${priceValue}`;
          }
        }
        // Se n√£o for objeto, verificar se √© string com R$
        const stringValue = String(value);
        if (stringValue.includes('R$')) {
          return stringValue;
        } else {
          return `R$ ${stringValue}`;
        }
      
      case 'url':
        if (typeof value === 'string' && value.startsWith('http')) {
          return value.length > 50 ? `${value.substring(0, 50)}...` : value;
        }
        return String(value);
      
      case 'number':
        // Para DA (Domain Authority), s√≥ retornar o n√∫mero
        return String(value);
      
      case 'email':
        return String(value);
      
      default:
        if (typeof value === 'object') {
          return JSON.stringify(value).substring(0, 100);
        }
        return String(value).substring(0, 100);
    }
  }

  /**
   * Gera nome do arquivo PDF
   */
  private static generateFileName(formTitle: string): string {
    const now = new Date();
    const dateStr = now.toISOString().split('T')[0]; // YYYY-MM-DD
    const timeStr = now.toTimeString().split(' ')[0].replace(/:/g, '-'); // HH-MM-SS
    
    const sanitizedTitle = formTitle
      .replace(/[^a-zA-Z0-9]/g, '_')
      .toLowerCase();

    return `${sanitizedTitle}_${dateStr}_${timeStr}.pdf`;
  }
}
